#!/usr/bin/env bash
# Author: Hakxcore https://github.com/hakxcore

#sudo apt install html-xml-utils
#sudo apt  install libxml2-utils

currentVersion="v0.0.1"
configuredClient=""

#colors
RED="$(printf '\033[31m')" GREEN="$(printf '\033[1;32m')" ORANGE="$(printf '\033[33m')" BLUE="$(printf '\033[34m')"
MAGENTA="$(printf '\033[35m')" CYAN="$(printf '\033[36m')" WHITE="$(printf '\033[37m')" BLACK="$(printf '\033[30m')" 
REDBG="$(printf '\033[41m')" GREENBG="$(printf '\033[42m')" ORANGEBG="$(printf '\033[43m')" BLUEBG="$(printf '\033[44m')", 
MAGENTABG="$(printf '\033[45m')" CYANBG="$(printf '\033[46m')" WHITEBG="$(printf '\033[47m')" BLACKBG="$(printf '\033[40m')"
RESETBG="$(printf '\e[0m')" BLINK="$(printf '\033[5;31m')" YELLOW="$(printf '\033[1;33m')"

##Platform Check
if [[ "$OSTYPE" == linux-android* ]]; then
  distro="termux"
  platform="Termux"
  prefix="/data/data/com.termux/files/"
  SUDO=""
fi

if [ -z "$distro" ]; then
  distro=$(ls /etc | awk 'match($0, "(.+?)[-_](?:release|version)", groups) {if(groups[1] != "os") {print groups[1]}}')
  platform="Debian"
  prefix=""
  SUDO="sudo"
fi

if [ -z "$distro" ]; then
  if [ -f "/etc/os-release" ]; then
    distro="$(source /etc/os-release && echo $ID)"
  elif [ "$OSTYPE" == "darwin" ]; then
    distro="darwin"
    platform="Darwin"
    prefix=""
    SUDO="sudo"
  else 
    distro="invalid"
  fi
fi


## This function determines which http get tool the system has installed and returns an error if there isn't one
getConfiguredClient()
{
  if  command -v curl &>/dev/null; then
    configuredClient="curl"                                             
  else
    echo "Error: This tool requires either curl to be installed." >&2
    return 1
  fi
}

## This function determines weather pv tool is installed or not
getConfiguredPv()
{
  if  command -v curl &>/dev/null; then
    echo ""                                             
  else
    echo "Error: This tool requires either pv to be installed." >&2
    echo "use `apt insstall pv`"

    return 1
  fi
}

## This function determines weather w3m tool is installed or not
getConfiguredW3m()
{
  if  command -v curl &>/dev/null; then
   echo ""                                              
  else
    echo "Error: This tool requires either w3m to be installed." >&2
    echo "use `apt insstall w3m`"

    return 1
  fi
}
##This function determines the latest version of the termux-snippets if available and installs them
update()
{
  repositoryName="fig"
  githubUserName="hakxcore"
  nameOfInstallFile="install"
  latestVersion=$(curl -s https://api.github.com/repos/hakxcore/termux-snippets/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+") #always grabs the tag without the v option
  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]]; then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]]; then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == [Yy] ]]; then
        cd ~ || { echo 'Update Failed'; exit 1; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName || { echo "Permissions Error: try running the update again"; exit 1; } ; fi
        git clone "https://github.com/$githubUserName/$repositoryName" || { echo "Couldn't download latest version"; exit 1; }
        cd $repositoryName || { echo 'Update Failed'; exit 1; }
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."
        $SUDO ./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName || { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory agian"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi
}


##This function Checks for the insternet connectivity
checkInternet()
{
  curl -s github.com > /dev/null 2>&1 || { echo "Error: no active internet connection" >&2; return 1; } # query github with a get request
}

banner()
{

echo -e "\t\t\t\t$GREEN·▄▄▄▪   ▄▄ • "
echo -e "\t\t\t\t▐▄▄·██ ▐█ ▀ ▪ "
echo -e "\t\t\t\t██▪ ▐█·▄█ ▀█▄ "
echo -e "\t\t\t\t██▌.▐█▌▐█▄▪▐█ "
echo -e "\t\t\t\t▀▀▀ ▀▀▀·▀▀▀▀ $RESETBG$BLUE$currentVersion$RESETBG"
echo ""
echo -e "$YELLOW\t\t\t ------(Instructions)------$RESETBG"
echo -e "$MAGENTA\t\t -\U2192 Confidence$CYAN: 0.0 - 1.0, Default: 0.5"   
sleep 1
echo -e "$MAGENTA\t\t -\U2192 Emotion$CYAN:    joy, neutral, surprise"
sleep 1
echo -e "$MAGENTA\t\t -\U2192 Gender$CYAN:     male, female"
sleep 1
echo -e "$MAGENTA\t\t -\U2192 Age$CYAN:        infant, child, young-adult, adult, elderly"
sleep 1
echo -e "$MAGENTA\t\t -\U2192 Ethnicity$CYAN:  white, latino, asian, black"
sleep 1
echo -e "$MAGENTA\t\t -\U2192 Eye_color$CYAN:  brown, blue, gray, green"
sleep 1
echo -e "$MAGENTA\t\t -\U2192 Hair_color$CYAN: brown, blond, black, gray, red"
sleep 1
echo -e "$MAGENTA\t\t -\U2192 Hair_length$CYAN:short, medium, long"
sleep 1
echo -e "$MAGENTA\t\t -\U2192 Order_by$CYAN:   latest, oldest, random, Default: latest. "
sleep 1
# echo -e "$MAGENTA 10. page"
# echo -e "$CYAN\tPage number to retrieve, Default: 1"
# sleep 1
# echo "$MAGENTA 11. per_page"
# echo -e "$CYAN\tNumber of items per page. Maximum: 100, Default: 10"
# sleep 1
}
##Main function
getFakeId()
{
  banner
  getConfiguredW3m
  getConfiguredPv
  echo $BLUE"--------------------------------------------------"$GREEN"Images Size Wise$BLUE--------------------------------------------------------"
  curl --header "Authorization: API-Key NS6_7xnlFmzIiOu5Eeg9vw" https://api.generated.photos/api/v1/faces?per_page=1&gender=$1&emotion=neutral&age=$2 | jq | grep https | awk {'print "Image Size "$1,$2'} | sed 's/"//g' | nl
  sleep 3
  echo -e $BLUE"\n--------------------------------------------------"$GREEN"Fake ID Data$BLUE--------------------------------------------------------"
  if [[ "$1" == "male" && "$2" == "child" ]]; then
  	gen="97"
  	min-age="2"
  	max-age="17"
  elif [[ "$1" == "male" && "$2" == "adult" ]]; then
  	gen="97"
  	min-age="18"
  	max-age="24"
  elif [[ "$1" == "male" && "$2" == "young-adult" ]]; then
  	gen="97"
  	min-age="25"
  	max-age="30"
  elif [[ "$1" == "male" && "$2" == "elderly" ]]; then
  	gen="97"
  	min-age="31"
  	max-age="60"
  fi
  #https://www.fakenamegenerator.com/gen-random-us-it.php | grep -i -B 120 'Shortcuts' | pv -qL 50
  w3m -dump https://www.fakenamegenerator.com/advanced.php?t=country&n%5B%5D=us&c%5B%5D=us&gen=$gen&age-min=$min-age&age-max=$max-age
}

##Usage and Help
usage()
{
  cat <<EOF
fig <age>
age=infant, child, young-adult, adult, elderly
Description: Genrate images of the peoples that doesn't even exists in this world.

Usage: fig age
  -u  Update Tool
  -h  Show the help
  -v  Get the tool version

Examples:
   fig child
   fig young-adult
EOF
}

##Options(flags)
while getopts "s:a:uvh" opt; do
  case "$opt" in
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    s)
		if [[ "$(echo "$@" | grep -Eo "\-s")" == "-s" ]];then gender="true";fi
		;;
	a)
		if [[ "$(echo "$@" | grep -Eo "\-a")" == "-a" ]];then age="true";fi
		;;

    h)  usage
        exit 0
        ;;
    v)  echo "Version $currentVersion"
        exit 0
        ;;
    u)
        getConfiguredClient || exit 1
        checkInternet || exit 1
        update
        exit 0
        ;;
      esac
done

##Driver
# special set of first arguments that have a specific behavior across tools
if [[ $# == "0" ]]; then
  usage ## if calling the tool with no flags and args chances are you want to return usage
  exit 0
elif [[ $# == "1" ]]; then
  if [[ $1 == "update" ]]; then
    getConfiguredClient || exit 1
    checkInternet || exit 1
    update || exit 1
    exit 0
  elif [[ $1 == "help" ]]; then
    usage
    exit 0
  fi
fi


if ($age && ! $gender)  || ($gender && ! $age);then
  echo "Error: the -a and the -s flag must be used to fetch lyrics."
  exit 1
elif $age && $gender;then
  gender=$(echo "$@" | grep -Eo "\-s [ a-z A-Z 0-9 . \ ]*[ -]?" | sed s/-s//g | sed s/-//g | sed s/^" "//g)
  if [[ $gender == "" ]];then { echo "Error: gender could not be parsed from input."; exit 1; };fi
  age=$(echo "$@" | grep -Eo "\-a [ a-z A-Z 0-9 . \ ]*[ -]?" | sed s/-a//g | sed s/-//g | sed s/^" "//g)
  if [[ $age == "" ]];then { echo "Error: age could not be parsed from input."; exit 1; };fi
  getConfiguredClient || exit 1
  checkInternet || exit 1
  getFakeId "$gender" "$age" || exit 1
else
  { clear; echo "You shouldnt be here but maaaaaaybeee you slipped passed me, learn to use the tool!"; sleep 5; clear;}
  usage
  exit 1
fi